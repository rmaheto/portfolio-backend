name: Backend CI/CD (Spring Boot)

on:
  push:
    branches: [ main ]         # build on main
  pull_request:
    branches: [ main ]         # run CI on PRs too (no deploy)
  workflow_dispatch:             # allow manual runs

concurrency:
  group: backend-${{ github.ref }}
  cancel-in-progress: true

env:
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"

jobs:
  # ------------------------------
  # CI: Install â†’ Format â†’ Test â†’ Package
  # ------------------------------
  ci:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Temurin JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      # -------- install dependencies (like your GitLab 'install dependencies') --------
      - name: Install/Restore dependencies
        run: |
          mvn -B -q dependency:resolve dependency:resolve-plugins

      # -------- code format check (google-java-format) --------
      - name: Check code format (google-java-format)
        run: |
          curl -L -o google-java-format.jar https://github.com/google/google-java-format/releases/download/v1.17.0/google-java-format-1.17.0-all-deps.jar
          find . -name "*.java" > java_files.txt
          # dry-run; fail if formatting would change anything
          java -jar google-java-format.jar --dry-run --set-exit-if-changed @java_files.txt

      # -------- unit tests --------
      - name: Run unit tests
        run: mvn -B test

      # -------- package (produce jar) --------
      - name: Package (repackage Spring Boot)
        run: mvn -B clean package spring-boot:repackage -DskipTests

      # Optional: keep artifact
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: target/*.jar
          if-no-files-found: error
          retention-days: 3

  # ------------------------------
  # Deploy (only on main, after CI success)
  # ------------------------------
  deploy:
    needs: [ci]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: target

      - name: Setup SSH
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST:    ${{ secrets.EC2_HOST }}
        run: |
          mkdir -p ~/.ssh
          echo "$EC2_SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$EC2_HOST" >> ~/.ssh/known_hosts

      - name: Deploy to server
        env:
          EC2_HOST:      ${{ secrets.EC2_HOST }}
          EC2_USER:      ${{ secrets.EC2_USER }}                 # e.g. ubuntu
          BACKEND_PATH:  ${{ secrets.BACKEND_DEPLOY_PATH }}      # e.g. /opt/portfolio-backend
          SERVICE_NAME:  ${{ secrets.SERVICE_NAME }}             # e.g. portfolio-backend.service
        run: |
          echo "ðŸ“¦ Rsync app.jar to server"
          JAR_PATH="$(ls -1 target/*.jar | head -n1)"
          rsync -avz --delete "$JAR_PATH" "$EC2_USER@$EC2_HOST:$BACKEND_PATH/app.jar"

          echo "ðŸ”„ Restart systemd service"
          ssh -o StrictHostKeyChecking=no "$EC2_USER@$EC2_HOST" \
            "sudo systemctl restart $SERVICE_NAME && sudo systemctl status $SERVICE_NAME --no-pager || (journalctl -u $SERVICE_NAME -n 200 --no-pager; exit 1)"

      # Optional: health check via nginx proxy (port 443) or direct (8090)
      - name: Health check (through nginx /api)
        env:
          PUBLIC_HOST: raymond-aheto.com
        run: |
          curl -fsS "https://$PUBLIC_HOST/api/actuator/health" | tee /dev/stderr | grep -q '"status":"UP"'
